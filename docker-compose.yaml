version: '3'
services:
  zookeeper:
    image: bitnami/zookeeper:3.9.1
    # to survive the container restart
    tmpfs: "/zktmp"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"

  kafka1:
    image: bitnami/kafka:3.7.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # optional - enable topic auto create
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data1:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  postgres:
    container_name: postgres
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      POSTGRES_DB: kafka
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  backend:
    container_name: backend
    depends_on:
      kafka1:
        condition: service_healthy
    build:
      context: ./backend/  # Path where Dockerfile for backend is located
      dockerfile: Dockerfile 
    image: backend
    ports:
      - "5000:5000"
    restart: unless-stopped

  inserter:
    container_name: inserter
    depends_on:
      kafka1:
        condition: service_healthy
    build:
      context: ./inserter/  # Path where Dockerfile for backend is located
      dockerfile: Dockerfile 
    image: inserter
    restart: unless-stopped

  mailer:
    container_name: mailer
    depends_on:
      kafka1:
        condition: service_healthy
    build:
      context: ./mailer/  # Path where Dockerfile for backend is located
      dockerfile: Dockerfile 
    image: mailer
    restart: unless-stopped

  order_processor:
    container_name: order_processor
    depends_on:
      kafka1:
        condition: service_healthy
    build:
      context: ./order_processor/  # Path where Dockerfile for backend is located
      dockerfile: Dockerfile 
    image: order_processor
    restart: unless-stopped
    volumes:
      - "./order_processor/stock.json:/app/stock.json"

volumes:
  kafka_data1:
    driver: local
  postgres-data:

